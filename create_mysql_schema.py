import mysql.connector
from mysql.connector import Error
from config_mysql import MYSQL_CONFIG

def create_mysql_schema():
    """Cr√©er le sch√©ma et les tables dans MySQL"""
    
    # Configuration pour se connecter sans sch√©ma sp√©cifique
    admin_config = MYSQL_CONFIG.copy()
    admin_config.pop('database', None)  # Retirer le sch√©ma pour le cr√©er
    
    try:
        # Connexion administrative
        connection = mysql.connector.connect(**admin_config)
        cursor = connection.cursor()
        
        # 1. Cr√©er le sch√©ma peupleun s'il n'existe pas
        print("Cr√©ation du sch√©ma 'peupleun'...")
        cursor.execute("CREATE SCHEMA IF NOT EXISTS peupleun CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
        print("‚úì Sch√©ma 'peupleun' cr√©√© ou existe d√©j√†")
        
        # 2. Utiliser le sch√©ma peupleun
        cursor.execute("USE peupleun")
        
        # 3. Cr√©er la table users
        print("Cr√©ation de la table 'users'...")
        create_users_table = """
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(80) NOT NULL UNIQUE,
            password VARCHAR(120) NOT NULL,
            email VARCHAR(120) UNIQUE,
            is_admin BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_username (username),
            INDEX idx_email (email)
        ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """
        cursor.execute(create_users_table)
        print("‚úì Table 'users' cr√©√©e")
        
        # 4. Cr√©er la table submissions  
        print("Cr√©ation de la table 'submissions'...")
        create_submissions_table = """
        CREATE TABLE IF NOT EXISTS submissions (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(80) NOT NULL,
            email VARCHAR(120),
            nom VARCHAR(100),
            prenom VARCHAR(100),
            age VARCHAR(10),
            region VARCHAR(100),
            occupation VARCHAR(200),
            salaire VARCHAR(50),
            education VARCHAR(200),
            sante VARCHAR(200),
            transport VARCHAR(200),
            logement VARCHAR(200),
            environnement VARCHAR(200),
            economie VARCHAR(200),
            securite VARCHAR(200),
            culture VARCHAR(200),
            participation VARCHAR(200),
            priorites TEXT,
            ameliorations TEXT,
            commentaires TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_username (username),
            INDEX idx_created_at (created_at)
        ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """
        cursor.execute(create_submissions_table)
        print("‚úì Table 'submissions' cr√©√©e")
        
        # 5. Cr√©er la table cercles
        print("Cr√©ation de la table 'cercles'...")
        create_cercles_table = """
        CREATE TABLE IF NOT EXISTS cercles (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nom VARCHAR(200) NOT NULL,
            description TEXT,
            region VARCHAR(100),
            membres_count INT DEFAULT 0,
            created_by VARCHAR(80),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            INDEX idx_region (region),
            INDEX idx_created_by (created_by)
        ) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
        """
        cursor.execute(create_cercles_table)
        print("‚úì Table 'cercles' cr√©√©e")
        
        # 6. Cr√©er un utilisateur admin par d√©faut
        print("Cr√©ation de l'utilisateur admin par d√©faut...")
        create_admin_user = """
        INSERT IGNORE INTO users (username, password, email, is_admin) 
        VALUES ('admin', 'pbkdf2:sha256:600000$default$hash', 'admin@peupleun.live', TRUE)
        """
        cursor.execute(create_admin_user)
        print("‚úì Utilisateur admin cr√©√©")
        
        connection.commit()
        print("\nüéâ Migration MySQL termin√©e avec succ√®s!")
        print("üìä Sch√©ma 'peupleun' cr√©√© avec les tables:")
        print("   - users (gestion des utilisateurs)")
        print("   - submissions (donn√©es du questionnaire)")  
        print("   - cercles (cercles de d√©mocratie)")
        
    except Error as e:
        print(f"‚ùå Erreur lors de la cr√©ation MySQL: {e}")
        return False
        
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()
            print("üìù Connexion MySQL ferm√©e")
    
    return True

def test_mysql_connection():
    """Tester la connexion MySQL"""
    try:
        # Test avec le sch√©ma peupleun
        connection = mysql.connector.connect(**MYSQL_CONFIG)
        cursor = connection.cursor()
        
        # Test de lecture
        cursor.execute("SELECT COUNT(*) as user_count FROM users")
        result = cursor.fetchone()
        print(f"‚úì Test connexion r√©ussi - {result[0]} utilisateurs dans la base")
        
        # Test des tables
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        print(f"‚úì Tables disponibles: {[table[0] for table in tables]}")
        
        connection.close()
        return True
        
    except Error as e:
        print(f"‚ùå Erreur de test de connexion: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√©but de la migration MySQL...")
    print(f"üìç Serveur: {MYSQL_CONFIG['host']}")
    print(f"üìÇ Sch√©ma: {MYSQL_CONFIG['database']}")
    print(f"üë§ Utilisateur: {MYSQL_CONFIG['user']}")
    print("-" * 50)
    
    # Cr√©er le sch√©ma et les tables
    if create_mysql_schema():
        print("\nüîç Test de la connexion...")
        test_mysql_connection()
    else:
        print("‚ùå √âchec de la migration")
