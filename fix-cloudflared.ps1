# ====================================================
# üîß UMan API - Fix Cloudflared Connection Issues
# ====================================================

Write-Host "üöÄ UMan API - Cloudflared Diagnostics & Fix" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan

# Function to write colored output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# 1. Stop existing cloudflared processes
Write-ColorOutput "üî¥ Arr√™t des processus cloudflared existants..." "Yellow"
try {
    Get-Process cloudflared -ErrorAction SilentlyContinue | Stop-Process -Force
    Write-ColorOutput "‚úÖ Processus cloudflared arr√™t√©s" "Green"
} catch {
    Write-ColorOutput "‚ÑπÔ∏è Aucun processus cloudflared en cours" "Gray"
}

# 2. Stop and remove cloudflared service if exists
Write-ColorOutput "üî¥ Arr√™t et suppression du service cloudflared..." "Yellow"
try {
    & cloudflared.exe service uninstall 2>$null
    Write-ColorOutput "‚úÖ Service cloudflared d√©sinstall√©" "Green"
} catch {
    Write-ColorOutput "‚ÑπÔ∏è Service cloudflared n'√©tait pas install√©" "Gray"
}

# 3. Check network connectivity to Cloudflare
Write-ColorOutput "üåê Test de connectivit√© r√©seau..." "Yellow"
$cfEndpoints = @(
    "1.1.1.1",
    "198.41.192.227", 
    "cloudflare.com"
)

foreach ($endpoint in $cfEndpoints) {
    try {
        $ping = Test-NetConnection -ComputerName $endpoint -Port 443 -WarningAction SilentlyContinue
        if ($ping.TcpTestSucceeded) {
            Write-ColorOutput "‚úÖ Connexion √† $endpoint: OK" "Green"
        } else {
            Write-ColorOutput "‚ùå Connexion √† $endpoint: √âCHEC" "Red"
        }
    } catch {
        Write-ColorOutput "‚ùå Erreur test $endpoint" "Red"
    }
}

# 4. Check tunnel configuration
Write-ColorOutput "üîç V√©rification de la configuration du tunnel..." "Yellow"
$configFile = "config.yml"
if (Test-Path $configFile) {
    Write-ColorOutput "‚úÖ Fichier config.yml trouv√©" "Green"
    $config = Get-Content $configFile
    Write-ColorOutput "Contenu de la configuration:" "Cyan"
    $config | ForEach-Object { Write-ColorOutput "  $_" "Gray" }
} else {
    Write-ColorOutput "‚ùå Fichier config.yml non trouv√©" "Red"
}

# 5. Check for certificate files
Write-ColorOutput "üîí V√©rification des certificats..." "Yellow"
$certFiles = @("cert.pem", "cloudflared.crt", "*.pem")
$foundCerts = @()

foreach ($pattern in $certFiles) {
    $found = Get-ChildItem -Path . -Name $pattern -ErrorAction SilentlyContinue
    if ($found) {
        $foundCerts += $found
    }
}

if ($foundCerts.Count -gt 0) {
    Write-ColorOutput "‚úÖ Certificats trouv√©s:" "Green"
    $foundCerts | ForEach-Object { Write-ColorOutput "  $_" "Gray" }
} else {
    Write-ColorOutput "‚ö†Ô∏è Aucun certificat local trouv√©" "Yellow"
}

# 6. Create a new configuration with Windows-specific settings
Write-ColorOutput "‚öôÔ∏è Cr√©ation d'une configuration optimis√©e pour Windows..." "Yellow"

# Get tunnel credentials if they exist
$credentialsFile = Get-ChildItem -Path . -Name "*.json" | Where-Object { $_.Name -match "^[a-f0-9-]{36}\.json$" } | Select-Object -First 1

if ($credentialsFile) {
    $tunnelId = $credentialsFile.BaseName
    Write-ColorOutput "‚úÖ Tunnel ID trouv√©: $tunnelId" "Green"
    
    # Create optimized config
    $configContent = @"
tunnel: $tunnelId
credentials-file: $($credentialsFile.Name)

# Windows-specific optimizations
protocol: quic
grace-period: 30s
retries: 5
ha-connections: 2

# Logging
loglevel: info

# Ingress rules
ingress:
  - hostname: uman-api.com
    service: http://localhost:5000
  - hostname: democratie.uman-api.com  
    service: http://localhost:5000
  - hostname: biq.uman-api.com
    service: http://localhost:5000
  - hostname: garde.uman-api.com
    service: http://localhost:5000
  - hostname: sheriff.uman-api.com
    service: http://localhost:5000
  - hostname: monark.uman-api.com
    service: http://localhost:5000
  - service: http_status:404
"@
    
    $configContent | Out-File -FilePath "config-fixed.yml" -Encoding UTF8
    Write-ColorOutput "‚úÖ Configuration optimis√©e cr√©√©e: config-fixed.yml" "Green"
    
} else {
    Write-ColorOutput "‚ùå Aucun fichier de credentials trouv√© (*.json)" "Red"
}

# 7. Test connection with optimized settings
Write-ColorOutput "üß™ Test de connexion avec configuration optimis√©e..." "Yellow"
if (Test-Path "config-fixed.yml") {
    Write-ColorOutput "Lancement du test de connexion..." "Cyan"
    Write-ColorOutput "Commande: cloudflared.exe tunnel --config config-fixed.yml run" "Gray"
    Write-ColorOutput "" "White"
    Write-ColorOutput "Pour d√©marrer le tunnel avec la configuration corrig√©e:" "Yellow"
    Write-ColorOutput "  cloudflared.exe tunnel --config config-fixed.yml run" "Green"
    Write-ColorOutput "" "White"
    Write-ColorOutput "Pour installer comme service Windows:" "Yellow"
    Write-ColorOutput "  cloudflared.exe service install --config config-fixed.yml" "Green"
}

# 8. Create a startup script
$startupScript = @"
# UMan API - Cloudflared Startup Script
# Usage: .\start-cloudflared-fixed.ps1

Write-Host "üöÄ D√©marrage du tunnel Cloudflared optimis√©..." -ForegroundColor Cyan

# Stop existing processes
Get-Process cloudflared -ErrorAction SilentlyContinue | Stop-Process -Force

# Start with optimized config
& cloudflared.exe tunnel --config config-fixed.yml run
"@

$startupScript | Out-File -FilePath "start-cloudflared-fixed.ps1" -Encoding UTF8
Write-ColorOutput "‚úÖ Script de d√©marrage cr√©√©: start-cloudflared-fixed.ps1" "Green"

# 9. System diagnostics
Write-ColorOutput "üîç Diagnostics syst√®me..." "Yellow"
Write-ColorOutput "OS: $((Get-WmiObject Win32_OperatingSystem).Caption)" "Gray"
Write-ColorOutput "PowerShell: $($PSVersionTable.PSVersion)" "Gray"
Write-ColorOutput "Date/Heure: $(Get-Date)" "Gray"

# 10. DNS flush (peut aider avec les probl√®mes de connectivit√©)
Write-ColorOutput "üîÑ Nettoyage du cache DNS..." "Yellow"
try {
    & ipconfig /flushdns | Out-Null
    Write-ColorOutput "‚úÖ Cache DNS nettoy√©" "Green"
} catch {
    Write-ColorOutput "‚ö†Ô∏è Impossible de nettoyer le cache DNS" "Yellow"
}

Write-ColorOutput "" "White"
Write-ColorOutput "üéØ R√âSUM√â DES ACTIONS:" "Cyan"
Write-ColorOutput "1. Processus cloudflared arr√™t√©s" "White"
Write-ColorOutput "2. Service d√©sinstall√©" "White"
Write-ColorOutput "3. Connectivit√© r√©seau test√©e" "White"
Write-ColorOutput "4. Configuration optimis√©e cr√©√©e" "White"
Write-ColorOutput "5. Script de d√©marrage g√©n√©r√©" "White"
Write-ColorOutput "" "White"
Write-ColorOutput "üìã PROCHAINES √âTAPES:" "Yellow"
Write-ColorOutput "1. Ex√©cutez: .\start-cloudflared-fixed.ps1" "Green"
Write-ColorOutput "2. Si stable, installez le service: cloudflared.exe service install --config config-fixed.yml" "Green"
Write-ColorOutput "3. Testez vos domaines: https://uman-api.com" "Green"
Write-ColorOutput "" "White"
Write-ColorOutput "‚úÖ Diagnostic termin√©!" "Cyan"
