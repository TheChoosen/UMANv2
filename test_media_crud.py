#!/usr/bin/env python3
"""
Test sp√©cifique pour les nouvelles fonctionnalit√©s de cr√©ation et √©dition de m√©dias
"""
import requests
import json
import sys
from datetime import datetime

# Configuration
BASE_URL = "http://127.0.0.1:8002"
TEST_CREDENTIALS = {
    "email": "admin@peupleun.live",
    "password": "admin123"
}

def login():
    """Connexion administrateur"""
    session = requests.Session()
    
    # Page de login
    login_page = session.get(f"{BASE_URL}/rdkq/login")
    if login_page.status_code != 200:
        return None
    
    # Connexion
    login_data = {
        "email": TEST_CREDENTIALS["email"],
        "password": TEST_CREDENTIALS["password"]
    }
    
    response = session.post(f"{BASE_URL}/rdkq/login", data=login_data, allow_redirects=False)
    
    if response.status_code == 302:
        return session
    return None

def test_new_media_page(session):
    """Test d'acc√®s √† la page de cr√©ation"""
    print("=== Test page de cr√©ation ===")
    
    response = session.get(f"{BASE_URL}/rdkq/admin/mediatheque/new")
    
    if response.status_code == 200:
        if "Ajouter un Nouveau M√©dia" in response.text:
            print("‚úÖ Page de cr√©ation accessible et contenu correct")
            return True
        else:
            print("‚ùå Page accessible mais contenu incorrect")
            return False
    else:
        print(f"‚ùå Erreur d'acc√®s √† la page de cr√©ation ({response.status_code})")
        return False

def test_create_media(session):
    """Test de cr√©ation d'un nouveau m√©dia"""
    print("\n=== Test cr√©ation d'un m√©dia ===")
    
    new_media_data = {
        "title": "Test M√©dia Automatis√©",
        "description": "M√©dia cr√©√© automatiquement par les tests",
        "category": "test",
        "author": "Test Bot",
        "image_url": "https://via.placeholder.com/300x200",
        "document_url": "https://example.com/document.pdf",
        "is_public": True,
        "is_featured": False
    }
    
    response = session.post(
        f"{BASE_URL}/rdkq/admin/mediatheque/new",
        json=new_media_data
    )
    
    if response.status_code == 200:
        try:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ M√©dia cr√©√© avec succ√®s")
                return True
            else:
                print(f"‚ùå Erreur lors de la cr√©ation: {result.get('error')}")
                return False
        except json.JSONDecodeError:
            print("‚ùå R√©ponse JSON invalide")
            return False
    else:
        print(f"‚ùå Erreur HTTP lors de la cr√©ation ({response.status_code})")
        return False

def test_edit_media_page(session):
    """Test d'acc√®s √† la page d'√©dition"""
    print("\n=== Test page d'√©dition ===")
    
    # D'abord r√©cup√©rer un m√©dia existant
    response = session.get(f"{BASE_URL}/rdkq/admin/mediatheque/data")
    
    if response.status_code == 200:
        try:
            data = response.json()
            if data.get('ok') and data.get('media'):
                media_id = data['media'][0]['id']
                
                # Tester l'acc√®s √† la page d'√©dition
                edit_response = session.get(f"{BASE_URL}/rdkq/admin/mediatheque/{media_id}/edit")
                
                if edit_response.status_code == 200:
                    if "Modifier le M√©dia" in edit_response.text:
                        print(f"‚úÖ Page d'√©dition accessible pour m√©dia ID {media_id}")
                        return True, media_id
                    else:
                        print("‚ùå Page accessible mais contenu incorrect")
                        return False, None
                else:
                    print(f"‚ùå Erreur d'acc√®s √† la page d'√©dition ({edit_response.status_code})")
                    return False, None
            else:
                print("‚ùå Aucun m√©dia disponible pour tester l'√©dition")
                return False, None
        except json.JSONDecodeError:
            print("‚ùå Erreur de parsing JSON")
            return False, None
    else:
        print(f"‚ùå Impossible de r√©cup√©rer les m√©dias ({response.status_code})")
        return False, None

def test_edit_media(session, media_id):
    """Test de modification d'un m√©dia"""
    print(f"\n=== Test modification du m√©dia ID {media_id} ===")
    
    updated_data = {
        "title": "M√©dia Modifi√© par Test",
        "description": "Description mise √† jour automatiquement",
        "category": "test-modifie",
        "author": "Test Bot Updater",
        "image_url": "https://via.placeholder.com/400x300",
        "document_url": "https://example.com/updated-document.pdf",
        "is_public": False,  # Changer la visibilit√©
        "is_featured": True  # Mettre en vedette
    }
    
    response = session.post(
        f"{BASE_URL}/rdkq/admin/mediatheque/{media_id}/edit",
        json=updated_data
    )
    
    if response.status_code == 200:
        try:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ M√©dia modifi√© avec succ√®s")
                return True
            else:
                print(f"‚ùå Erreur lors de la modification: {result.get('error')}")
                return False
        except json.JSONDecodeError:
            print("‚ùå R√©ponse JSON invalide")
            return False
    else:
        print(f"‚ùå Erreur HTTP lors de la modification ({response.status_code})")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test des fonctionnalit√©s de cr√©ation et √©dition - RDKQ")
    print(f"üïí {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)
    
    # Connexion
    session = login()
    if not session:
        print("‚ùå √âCHEC: Impossible de se connecter")
        sys.exit(1)
    
    print("‚úÖ Connexion r√©ussie")
    
    # Tests
    tests = []
    
    # Test page de cr√©ation
    tests.append(("Page de cr√©ation", test_new_media_page(session)))
    
    # Test cr√©ation de m√©dia
    tests.append(("Cr√©ation de m√©dia", test_create_media(session)))
    
    # Test page d'√©dition
    edit_page_result, media_id = test_edit_media_page(session)
    tests.append(("Page d'√©dition", edit_page_result))
    
    # Test modification de m√©dia
    if edit_page_result and media_id:
        tests.append(("Modification de m√©dia", test_edit_media(session, media_id)))
    else:
        tests.append(("Modification de m√©dia", False))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = sum(1 for _, result in tests if result)
    total = len(tests)
    
    for test_name, result in tests:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{status:<12} {test_name}")
    
    print("-" * 60)
    print(f"üéØ Score: {passed}/{total} tests r√©ussis ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ TOUS LES TESTS DE CR√âATION/√âDITION SONT PASS√âS !")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©.")
        sys.exit(1)

if __name__ == "__main__":
    main()
