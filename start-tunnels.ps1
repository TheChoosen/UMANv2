# Script de d√©marrage complet pour les tunnels Cloudflare et l'application Flask
# Auteur: Assistant
# Date: $(Get-Date)

param(
    [switch]$ConfigureOnly,  # Seulement configurer sans d√©marrer
    [switch]$StartOnly       # Seulement d√©marrer sans reconfigurer
)

# Configuration
$TunnelID = "28561e3a-b70d-47e4-84ea-e86ffd20e358"
$TunnelName = "umanapi"
$Port = 8002
$UserProfile = "C:\Users\amena"
$CloudflaredDir = Join-Path $UserProfile ".cloudflared"
$CredFile = Join-Path $CloudflaredDir ("$TunnelID.json")
$ConfigFile = Join-Path $CloudflaredDir "config.yml"
$AppPath = "W:\UMANAPI"

Write-Host "üöÄ D√âMARRAGE DES TUNNELS CLOUDFLARE" -ForegroundColor White -BackgroundColor DarkBlue
Write-Host "=" * 60 -ForegroundColor Cyan

# Fonction pour v√©rifier si un processus fonctionne
function Test-ProcessRunning {
    param([string]$ProcessName)
    return (Get-Process -Name $ProcessName -ErrorAction SilentlyContinue) -ne $null
}

# Fonction pour v√©rifier si un port est utilis√©
function Test-PortInUse {
    param([int]$Port)
    $connection = netstat -an | Select-String ":$Port "
    return $connection -ne $null
}

# √âtape 1: V√©rifier l'√©tat actuel
Write-Host "`nüìä V√âRIFICATION DE L'√âTAT ACTUEL" -ForegroundColor Yellow
Write-Host "-" * 40 -ForegroundColor Yellow

# V√©rifier le service Cloudflared
$CloudflaredService = Get-Service -Name "cloudflared" -ErrorAction SilentlyContinue
if ($CloudflaredService) {
    Write-Host "‚úÖ Service Cloudflared: $($CloudflaredService.Status)" -ForegroundColor Green
} else {
    Write-Host "‚ùå Service Cloudflared: Non install√©" -ForegroundColor Red
    exit 1
}

# V√©rifier si l'application Flask fonctionne
if (Test-PortInUse -Port $Port) {
    Write-Host "‚úÖ Application Flask: En cours d'ex√©cution sur le port $Port" -ForegroundColor Green
    $FlaskRunning = $true
} else {
    Write-Host "‚ö†Ô∏è  Application Flask: Non d√©marr√©e" -ForegroundColor Yellow
    $FlaskRunning = $false
}

# V√©rifier les tunnels Cloudflare
if (Test-ProcessRunning -ProcessName "cloudflared") {
    Write-Host "‚úÖ Tunnels Cloudflare: En cours d'ex√©cution" -ForegroundColor Green
    $TunnelsRunning = $true
} else {
    Write-Host "‚ö†Ô∏è  Tunnels Cloudflare: Non d√©marr√©s" -ForegroundColor Yellow
    $TunnelsRunning = $false
}

# √âtape 2: Configuration (si n√©cessaire)
if (-not $StartOnly) {
    Write-Host "`n‚öôÔ∏è  CONFIGURATION DES TUNNELS" -ForegroundColor Yellow
    Write-Host "-" * 40 -ForegroundColor Yellow
    
    # Cr√©er le r√©pertoire s'il n'existe pas
    if (-not (Test-Path $CloudflaredDir)) {
        New-Item -ItemType Directory -Path $CloudflaredDir -Force | Out-Null
        Write-Host "üìÅ R√©pertoire Cloudflare cr√©√©: $CloudflaredDir" -ForegroundColor Green
    }
    
    # Configuration YAML multi-domaines
    $configYaml = @"
# Configuration Cloudflare Tunnel multi-domaines
# Tunnel: $TunnelID
# Domaines: uman-api.com et peupleun.live
# G√©n√©r√© le: $(Get-Date)

tunnel: $TunnelID
credentials-file: $CredFile

ingress:
  - hostname: uman-api.com
    service: http://127.0.0.1:$Port
  - hostname: www.uman-api.com
    service: http://127.0.0.1:$Port
  - hostname: peupleun.live
    service: http://127.0.0.1:$Port
  - hostname: www.peupleun.live
    service: http://127.0.0.1:$Port
  - hostname: "*.peupleun.live"
    service: http://127.0.0.1:$Port
  - hostname: "*.uman-api.com"
    service: http://127.0.0.1:$Port
  - service: http_status:404

loglevel: info
"@

    # √âcrire la configuration
    Set-Content -Path $ConfigFile -Value $configYaml -Encoding UTF8
    Write-Host "‚úÖ Configuration mise √† jour: $ConfigFile" -ForegroundColor Green
    
    # Afficher la configuration
    Write-Host "`nüìÑ Configuration active:" -ForegroundColor Cyan
    Write-Host "-" * 30 -ForegroundColor Gray
    Get-Content $ConfigFile | ForEach-Object { Write-Host "   $_" -ForegroundColor White }
}

# √âtape 3: D√©marrage de l'application Flask
if (-not $ConfigureOnly -and -not $FlaskRunning) {
    Write-Host "`nüêç D√âMARRAGE DE L'APPLICATION FLASK" -ForegroundColor Yellow
    Write-Host "-" * 40 -ForegroundColor Yellow
    
    # Aller dans le r√©pertoire de l'application
    Set-Location $AppPath
    
    # D√©marrer l'application Flask en arri√®re-plan
    Write-Host "‚ö° D√©marrage de l'application Flask..." -ForegroundColor Cyan
    $FlaskJob = Start-Job -ScriptBlock {
        param($AppPath)
        Set-Location $AppPath
        & "W:\UMANAPI\.venv\Scripts\Activate.ps1"
        python app.py
    } -ArgumentList $AppPath
    
    # Attendre que l'application d√©marre
    $attempts = 0
    $maxAttempts = 10
    do {
        Start-Sleep -Seconds 2
        $attempts++
        Write-Host "   Tentative $attempts/$maxAttempts..." -ForegroundColor Gray
    } while (-not (Test-PortInUse -Port $Port) -and $attempts -lt $maxAttempts)
    
    if (Test-PortInUse -Port $Port) {
        Write-Host "‚úÖ Application Flask d√©marr√©e sur http://127.0.0.1:$Port" -ForegroundColor Green
    } else {
        Write-Host "‚ùå √âchec du d√©marrage de l'application Flask" -ForegroundColor Red
        exit 1
    }
}

# √âtape 4: D√©marrage des tunnels Cloudflare
if (-not $ConfigureOnly) {
    Write-Host "`nüåê D√âMARRAGE DES TUNNELS CLOUDFLARE" -ForegroundColor Yellow
    Write-Host "-" * 40 -ForegroundColor Yellow
    
    if ($TunnelsRunning) {
        Write-Host "‚ö†Ô∏è  Arr√™t des tunnels existants..." -ForegroundColor Yellow
        Stop-Process -Name "cloudflared" -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 3
    }
    
    # D√©marrer le tunnel
    Write-Host "üöÄ D√©marrage du tunnel '$TunnelName'..." -ForegroundColor Cyan
    $TunnelJob = Start-Job -ScriptBlock {
        param($TunnelName)
        cloudflared tunnel run $TunnelName
    } -ArgumentList $TunnelName
    
    # Attendre un peu pour que le tunnel se connecte
    Start-Sleep -Seconds 5
    
    if (Test-ProcessRunning -ProcessName "cloudflared") {
        Write-Host "‚úÖ Tunnel Cloudflare d√©marr√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå √âchec du d√©marrage du tunnel" -ForegroundColor Red
    }
}

# √âtape 5: Affichage du statut final
Write-Host "`nüìà STATUT FINAL" -ForegroundColor Yellow
Write-Host "-" * 40 -ForegroundColor Yellow

if (Test-PortInUse -Port $Port) {
    Write-Host "‚úÖ Application Flask: http://127.0.0.1:$Port" -ForegroundColor Green
} else {
    Write-Host "‚ùå Application Flask: Non accessible" -ForegroundColor Red
}

if (Test-ProcessRunning -ProcessName "cloudflared") {
    Write-Host "‚úÖ Tunnels Cloudflare: Actifs" -ForegroundColor Green
} else {
    Write-Host "‚ùå Tunnels Cloudflare: Non actifs" -ForegroundColor Red
}

# √âtape 6: URLs de test
Write-Host "`nüåç URLS DE TEST" -ForegroundColor Yellow
Write-Host "-" * 40 -ForegroundColor Yellow
Write-Host "Local:      http://127.0.0.1:$Port" -ForegroundColor Cyan
Write-Host "Domaine 1:  https://uman-api.com" -ForegroundColor Cyan
Write-Host "Domaine 2:  https://peupleun.live" -ForegroundColor Cyan
Write-Host "WWW 1:      https://www.uman-api.com" -ForegroundColor Cyan
Write-Host "WWW 2:      https://www.peupleun.live" -ForegroundColor Cyan

Write-Host "`nüéØ COMMANDES UTILES" -ForegroundColor Yellow
Write-Host "-" * 40 -ForegroundColor Yellow
Write-Host "Voir les logs Flask:     Get-Job | Receive-Job" -ForegroundColor White
Write-Host "Arr√™ter Flask:           Get-Job | Stop-Job" -ForegroundColor White
Write-Host "Arr√™ter les tunnels:     Stop-Process -Name cloudflared" -ForegroundColor White
Write-Host "Red√©marrer service:      Restart-Service cloudflared" -ForegroundColor White

Write-Host "`nüéâ D√âMARRAGE TERMIN√â!" -ForegroundColor Green -BackgroundColor Black
Write-Host "=" * 60 -ForegroundColor Green
