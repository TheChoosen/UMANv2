#!/usr/bin/env python3
"""
Test de la m√©diath√®que en modale
"""
import requests
import sys
from datetime import datetime

# Configuration
BASE_URL = "http://127.0.0.1:8002"

def test_mediatheque_modal():
    """Test de la page avec la modale m√©diath√®que"""
    print("=== Test de la page avec modale m√©diath√®que ===")
    
    try:
        # Tester l'acc√®s √† une page RDKQ qui contient la modale
        response = requests.get(f"{BASE_URL}/rdkq/")
        
        if response.status_code == 200:
            # V√©rifier que la modale est pr√©sente dans le HTML
            html_content = response.text
            
            checks = [
                ('Modal m√©diath√®que', 'id="mediathequeModal"' in html_content),
                ('Bouton m√©diath√®que', 'data-bs-target="#mediathequeModal"' in html_content),
                ('Container m√©dias', 'id="mediatheque-list"' in html_content),
                ('Script de chargement', 'loadMediathequeModal' in html_content),
                ('Fonction vues', 'incrementViews' in html_content)
            ]
            
            all_passed = True
            for check_name, passed in checks:
                status = "‚úÖ" if passed else "‚ùå"
                print(f"{status} {check_name}")
                if not passed:
                    all_passed = False
            
            return all_passed
        else:
            print(f"‚ùå Erreur d'acc√®s √† la page RDKQ ({response.status_code})")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False

def test_mediatheque_api():
    """Test de l'API m√©diath√®que publique"""
    print("\n=== Test de l'API m√©diath√®que publique ===")
    
    try:
        response = requests.get(f"{BASE_URL}/rdkq/mediatheque")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"‚úÖ API accessible - {len(data)} m√©dias trouv√©s")
                
                if data:
                    media = data[0]
                    required_fields = ['id', 'title', 'desc', 'img', 'src', 'category']
                    missing_fields = [field for field in required_fields if field not in media]
                    
                    if not missing_fields:
                        print("‚úÖ Structure des donn√©es correcte")
                        return True
                    else:
                        print(f"‚ùå Champs manquants: {missing_fields}")
                        return False
                else:
                    print("‚ö†Ô∏è  Aucun m√©dia trouv√© (normal si base vide)")
                    return True
                    
            except Exception as e:
                print(f"‚ùå Erreur de parsing JSON: {e}")
                return False
        else:
            print(f"‚ùå Erreur API ({response.status_code})")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Test de la m√©diath√®que en modale RDKQ")
    print(f"üïí {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 50)
    
    tests = [
        ("Page avec modale", test_mediatheque_modal()),
        ("API m√©diath√®que", test_mediatheque_api())
    ]
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìã R√âSUM√â")
    print("=" * 50)
    
    passed = sum(1 for _, result in tests if result)
    total = len(tests)
    
    for test_name, result in tests:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{status:<12} {test_name}")
    
    print("-" * 50)
    print(f"üéØ Score: {passed}/{total} tests r√©ussis ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ La m√©diath√®que modale est op√©rationnelle !")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©.")
        sys.exit(1)

if __name__ == "__main__":
    main()
